
Nymeria.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000165  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000009f  00000000  00000000  000002d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000011d  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000074  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000136  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000098  00000000  00000000  0000063e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
	unsigned char c;
	
	DDRA = 0x00;
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0xFF;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	87 bb       	out	0x17, r24	; 23
void left(){
	PORTB=0b00001000;
}

void right(){
	PORTB=0b00000001;
  72:	91 e0       	ldi	r25, 0x01	; 1
void backward(){
	PORTB=0b00000110;
}

void left(){
	PORTB=0b00001000;
  74:	48 e0       	ldi	r20, 0x08	; 8
void forward(){
	PORTB=0b00001001;
}

void backward(){
	PORTB=0b00000110;
  76:	36 e0       	ldi	r19, 0x06	; 6
#include <avr/io.h>
#include <util/delay.h>

//--------------------------------------------------------
void forward(){
	PORTB=0b00001001;
  78:	29 e0       	ldi	r18, 0x09	; 9
	DDRA = 0x00;
	DDRB = 0xFF;
	
	while(1)
	{
		c = PINA;
  7a:	89 b3       	in	r24, 0x19	; 25
		c=c & 0b00001111;
  7c:	8f 70       	andi	r24, 0x0F	; 15
		
		if(c==0b00000001)
  7e:	81 30       	cpi	r24, 0x01	; 1
  80:	11 f4       	brne	.+4      	; 0x86 <main+0x1a>
#include <avr/io.h>
#include <util/delay.h>

//--------------------------------------------------------
void forward(){
	PORTB=0b00001001;
  82:	28 bb       	out	0x18, r18	; 24
  84:	fa cf       	rjmp	.-12     	; 0x7a <main+0xe>
		c=c & 0b00001111;
		
		if(c==0b00000001)
			forward();
		
		else if(c==0b00000010)
  86:	82 30       	cpi	r24, 0x02	; 2
  88:	11 f4       	brne	.+4      	; 0x8e <main+0x22>
void forward(){
	PORTB=0b00001001;
}

void backward(){
	PORTB=0b00000110;
  8a:	38 bb       	out	0x18, r19	; 24
  8c:	f6 cf       	rjmp	.-20     	; 0x7a <main+0xe>
			forward();
		
		else if(c==0b00000010)
			backward();
		
		else if(c==0b00000100)
  8e:	84 30       	cpi	r24, 0x04	; 4
  90:	11 f4       	brne	.+4      	; 0x96 <main+0x2a>
void backward(){
	PORTB=0b00000110;
}

void left(){
	PORTB=0b00001000;
  92:	48 bb       	out	0x18, r20	; 24
  94:	f2 cf       	rjmp	.-28     	; 0x7a <main+0xe>
			backward();
		
		else if(c==0b00000100)
			left();
		
		else if(c==0b00001000)
  96:	88 30       	cpi	r24, 0x08	; 8
  98:	11 f4       	brne	.+4      	; 0x9e <main+0x32>
void left(){
	PORTB=0b00001000;
}

void right(){
	PORTB=0b00000001;
  9a:	98 bb       	out	0x18, r25	; 24
  9c:	ee cf       	rjmp	.-36     	; 0x7a <main+0xe>
}

void stop(){
	PORTB=0b00000000;
  9e:	18 ba       	out	0x18, r1	; 24
  a0:	ec cf       	rjmp	.-40     	; 0x7a <main+0xe>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
