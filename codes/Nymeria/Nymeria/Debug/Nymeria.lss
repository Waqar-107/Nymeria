
Nymeria.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000c0  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000083f  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000383  00000000  00000000  00000f57  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000354  00000000  00000000  000012da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000170  00000000  00000000  00001630  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000236  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002c3  00000000  00000000  000019d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000f0  00000000  00000000  00001c99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
  64:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADXL_write>:
	TWI_Ini();
	ADXL_write(0x2D,0x08);
}

void ADXL_write(char address,char data)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	d8 2f       	mov	r29, r24
  72:	c6 2f       	mov	r28, r22
	
	TWI_start();
  74:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <TWI_start>
	TWI_write(dev_write);
  78:	86 ea       	ldi	r24, 0xA6	; 166
  7a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <TWI_write>
	TWI_write(address);
  7e:	8d 2f       	mov	r24, r29
  80:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <TWI_write>
	TWI_write(data);
  84:	8c 2f       	mov	r24, r28
  86:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <TWI_write>
	TWI_stop();
  8a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TWI_stop>
}
  8e:	df 91       	pop	r29
  90:	cf 91       	pop	r28
  92:	08 95       	ret

00000094 <ADXL_init>:
 */ 

#include "ADXL345_I2C.h"
void ADXL_init()
{
	TWI_Ini();
  94:	0e 94 d5 00 	call	0x1aa	; 0x1aa <TWI_Ini>
	ADXL_write(0x2D,0x08);
  98:	68 e0       	ldi	r22, 0x08	; 8
  9a:	8d e2       	ldi	r24, 0x2D	; 45
  9c:	0e 94 36 00 	call	0x6c	; 0x6c <ADXL_write>
  a0:	08 95       	ret

000000a2 <ADXL_Acc>:
	TWI_stop();
}


void ADXL_Acc(float data_array[])
{
  a2:	cf 92       	push	r12
  a4:	df 92       	push	r13
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	ec 01       	movw	r28, r24
	int x0,x1,y0,y1,z0,z1;
	TWI_start();
  b4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <TWI_start>
	TWI_write(dev_write);
  b8:	86 ea       	ldi	r24, 0xA6	; 166
  ba:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <TWI_write>
	TWI_write(x0_address);
  be:	82 e3       	ldi	r24, 0x32	; 50
  c0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <TWI_write>
	TWI_start();
  c4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <TWI_start>
	TWI_write(dev_read);
  c8:	87 ea       	ldi	r24, 0xA7	; 167
  ca:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <TWI_write>
	x0=TWI_read(ACKM);
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <TWI_read>
  d4:	c8 2e       	mov	r12, r24
	x1=TWI_read(ACKM);
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <TWI_read>
  dc:	d8 2e       	mov	r13, r24
	y0=TWI_read(ACKM);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <TWI_read>
  e4:	e8 2e       	mov	r14, r24
	y1=TWI_read(ACKM);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <TWI_read>
  ec:	f8 2e       	mov	r15, r24
	z0=TWI_read(ACKM);
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <TWI_read>
  f4:	08 2f       	mov	r16, r24
	z1=TWI_read(NACKM);
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <TWI_read>
  fc:	18 2f       	mov	r17, r24
	TWI_stop();
  fe:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TWI_stop>
	data_array[0]=((x1<<8)|x0)*g/sensitivity;
 102:	6c 2d       	mov	r22, r12
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	7d 29       	or	r23, r13
 108:	88 27       	eor	r24, r24
 10a:	77 fd       	sbrc	r23, 7
 10c:	80 95       	com	r24
 10e:	98 2f       	mov	r25, r24
 110:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__floatsisf>
 114:	2d ec       	ldi	r18, 0xCD	; 205
 116:	3c ec       	ldi	r19, 0xCC	; 204
 118:	4c e1       	ldi	r20, 0x1C	; 28
 11a:	51 e4       	ldi	r21, 0x41	; 65
 11c:	0e 94 85 02 	call	0x50a	; 0x50a <__mulsf3>
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	4d e8       	ldi	r20, 0x8D	; 141
 126:	53 e4       	ldi	r21, 0x43	; 67
 128:	0e 94 67 01 	call	0x2ce	; 0x2ce <__divsf3>
 12c:	68 83       	st	Y, r22
 12e:	79 83       	std	Y+1, r23	; 0x01
 130:	8a 83       	std	Y+2, r24	; 0x02
 132:	9b 83       	std	Y+3, r25	; 0x03
	data_array[1]=((y1<<8)|y0)*g/sensitivity;
 134:	6e 2d       	mov	r22, r14
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	7f 29       	or	r23, r15
 13a:	88 27       	eor	r24, r24
 13c:	77 fd       	sbrc	r23, 7
 13e:	80 95       	com	r24
 140:	98 2f       	mov	r25, r24
 142:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__floatsisf>
 146:	2d ec       	ldi	r18, 0xCD	; 205
 148:	3c ec       	ldi	r19, 0xCC	; 204
 14a:	4c e1       	ldi	r20, 0x1C	; 28
 14c:	51 e4       	ldi	r21, 0x41	; 65
 14e:	0e 94 85 02 	call	0x50a	; 0x50a <__mulsf3>
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	4d e8       	ldi	r20, 0x8D	; 141
 158:	53 e4       	ldi	r21, 0x43	; 67
 15a:	0e 94 67 01 	call	0x2ce	; 0x2ce <__divsf3>
 15e:	6c 83       	std	Y+4, r22	; 0x04
 160:	7d 83       	std	Y+5, r23	; 0x05
 162:	8e 83       	std	Y+6, r24	; 0x06
 164:	9f 83       	std	Y+7, r25	; 0x07
	data_array[2]=((z1<<8)|z0)*g/sensitivity ;
 166:	60 2f       	mov	r22, r16
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	71 2b       	or	r23, r17
 16c:	88 27       	eor	r24, r24
 16e:	77 fd       	sbrc	r23, 7
 170:	80 95       	com	r24
 172:	98 2f       	mov	r25, r24
 174:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__floatsisf>
 178:	2d ec       	ldi	r18, 0xCD	; 205
 17a:	3c ec       	ldi	r19, 0xCC	; 204
 17c:	4c e1       	ldi	r20, 0x1C	; 28
 17e:	51 e4       	ldi	r21, 0x41	; 65
 180:	0e 94 85 02 	call	0x50a	; 0x50a <__mulsf3>
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	4d e8       	ldi	r20, 0x8D	; 141
 18a:	53 e4       	ldi	r21, 0x43	; 67
 18c:	0e 94 67 01 	call	0x2ce	; 0x2ce <__divsf3>
 190:	68 87       	std	Y+8, r22	; 0x08
 192:	79 87       	std	Y+9, r23	; 0x09
 194:	8a 87       	std	Y+10, r24	; 0x0a
 196:	9b 87       	std	Y+11, r25	; 0x0b
	
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	ff 90       	pop	r15
 1a2:	ef 90       	pop	r14
 1a4:	df 90       	pop	r13
 1a6:	cf 90       	pop	r12
 1a8:	08 95       	ret

000001aa <TWI_Ini>:
#include "I2C_master.h"

void TWI_Ini(void)
{
	TWBR = 32;
 1aa:	80 e2       	ldi	r24, 0x20	; 32
 1ac:	80 b9       	out	0x00, r24	; 0
	TWSR = 0x00;
 1ae:	11 b8       	out	0x01, r1	; 1
 1b0:	08 95       	ret

000001b2 <TWI_start>:
}


void TWI_start(void)
{
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 1b2:	84 ea       	ldi	r24, 0xA4	; 164
 1b4:	86 bf       	out	0x36, r24	; 54
	while (!( TWCR & (1<<TWINT) ) );
 1b6:	06 b6       	in	r0, 0x36	; 54
 1b8:	07 fe       	sbrs	r0, 7
 1ba:	fd cf       	rjmp	.-6      	; 0x1b6 <TWI_start+0x4>
	
	if ( !(( (TWSR & 0xF8) ==start) || ( (TWSR & 0xF8) == repeated_start)) )
 1bc:	81 b1       	in	r24, 0x01	; 1
 1be:	88 7f       	andi	r24, 0xF8	; 248
 1c0:	88 30       	cpi	r24, 0x08	; 8
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <TWI_start+0x1e>
 1c4:	81 b1       	in	r24, 0x01	; 1
 1c6:	88 7f       	andi	r24, 0xF8	; 248
 1c8:	80 31       	cpi	r24, 0x10	; 16
 1ca:	11 f0       	breq	.+4      	; 0x1d0 <TWI_start+0x1e>
	{
		TWI_start();
 1cc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <TWI_start>
 1d0:	08 95       	ret

000001d2 <TWI_stop>:
	}
}

void TWI_stop(void)
{
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN) ;
 1d2:	84 e9       	ldi	r24, 0x94	; 148
 1d4:	86 bf       	out	0x36, r24	; 54
 1d6:	08 95       	ret

000001d8 <TWI_write>:



void TWI_write(char data)
{
	TWDR = data;
 1d8:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 1da:	84 e8       	ldi	r24, 0x84	; 132
 1dc:	86 bf       	out	0x36, r24	; 54
	while ( !( TWCR & (1<<TWINT) ) );
 1de:	06 b6       	in	r0, 0x36	; 54
 1e0:	07 fe       	sbrs	r0, 7
 1e2:	fd cf       	rjmp	.-6      	; 0x1de <TWI_write+0x6>
	
}
 1e4:	08 95       	ret

000001e6 <TWI_read>:


char TWI_read(char ACKM_NACKM)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (ACKM_NACKM<<TWEA);
 1e6:	20 e4       	ldi	r18, 0x40	; 64
 1e8:	82 9f       	mul	r24, r18
 1ea:	c0 01       	movw	r24, r0
 1ec:	11 24       	eor	r1, r1
 1ee:	84 68       	ori	r24, 0x84	; 132
 1f0:	86 bf       	out	0x36, r24	; 54
	while ( !( TWCR & (1<<TWINT) ) );
 1f2:	06 b6       	in	r0, 0x36	; 54
 1f4:	07 fe       	sbrs	r0, 7
 1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <TWI_read+0xc>
	return TWDR;
 1f8:	83 b1       	in	r24, 0x03	; 3
 1fa:	08 95       	ret

000001fc <main>:
	sendData(direction);
}
//---------------------------------------------------------

int main(void)
{
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	2c 97       	sbiw	r28, 0x0c	; 12
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	f8 94       	cli
 20a:	de bf       	out	0x3e, r29	; 62
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	cd bf       	out	0x3d, r28	; 61
	DDRD=0xFF;
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	81 bb       	out	0x11, r24	; 17
	DDRC=0x00;
 214:	14 ba       	out	0x14, r1	; 20
	DDRA=0xFF;
 216:	8a bb       	out	0x1a, r24	; 26
	
	ADXL_init();
 218:	0e 94 4a 00 	call	0x94	; 0x94 <ADXL_init>
	
	float acc_data[3]={0};
 21c:	fe 01       	movw	r30, r28
 21e:	31 96       	adiw	r30, 0x01	; 1
 220:	8c e0       	ldi	r24, 0x0C	; 12
 222:	df 01       	movw	r26, r30
 224:	1d 92       	st	X+, r1
 226:	8a 95       	dec	r24
 228:	e9 f7       	brne	.-6      	; 0x224 <main+0x28>
//in1,in2 for right pairs- when in1=1,in2=0 then clockwise and when in1=0,in2=1 then anti-clockwise
//in3,in4 for left pairs- when in3=1,in4=0 then clockwise and when in3=0,in4=1 then anti-clockwise
//---------------------------------------------------------
void sendData(unsigned char direction) {
	//using PORTD for this purpose
	PORTD=direction;
 22a:	bb 24       	eor	r11, r11
 22c:	b3 94       	inc	r11
 22e:	68 94       	set
 230:	aa 24       	eor	r10, r10
 232:	a2 f8       	bld	r10, 2
 234:	0a e0       	ldi	r16, 0x0A	; 10
 236:	15 e0       	ldi	r17, 0x05	; 5
	
	float acc_data[3]={0};
	
	while(1)
	{
		ADXL_Acc(acc_data);
 238:	ce 01       	movw	r24, r28
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	0e 94 51 00 	call	0xa2	; 0xa2 <ADXL_Acc>
		
		if(acc_data[1]>=3.0)
 240:	cd 80       	ldd	r12, Y+5	; 0x05
 242:	de 80       	ldd	r13, Y+6	; 0x06
 244:	ef 80       	ldd	r14, Y+7	; 0x07
 246:	f8 84       	ldd	r15, Y+8	; 0x08
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	40 e4       	ldi	r20, 0x40	; 64
 24e:	50 e4       	ldi	r21, 0x40	; 64
 250:	c7 01       	movw	r24, r14
 252:	b6 01       	movw	r22, r12
 254:	0e 94 81 02 	call	0x502	; 0x502 <__gesf2>
 258:	88 23       	and	r24, r24
 25a:	14 f0       	brlt	.+4      	; 0x260 <main+0x64>
//in1,in2 for right pairs- when in1=1,in2=0 then clockwise and when in1=0,in2=1 then anti-clockwise
//in3,in4 for left pairs- when in3=1,in4=0 then clockwise and when in3=0,in4=1 then anti-clockwise
//---------------------------------------------------------
void sendData(unsigned char direction) {
	//using PORTD for this purpose
	PORTD=direction;
 25c:	12 bb       	out	0x12, r17	; 18
 25e:	29 c0       	rjmp	.+82     	; 0x2b2 <main+0xb6>
		ADXL_Acc(acc_data);
		
		if(acc_data[1]>=3.0)
			forward();
		
		else if(acc_data[1]<=-3.0)
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	40 e4       	ldi	r20, 0x40	; 64
 266:	50 ec       	ldi	r21, 0xC0	; 192
 268:	c7 01       	movw	r24, r14
 26a:	b6 01       	movw	r22, r12
 26c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__cmpsf2>
 270:	18 16       	cp	r1, r24
 272:	14 f0       	brlt	.+4      	; 0x278 <main+0x7c>
//in1,in2 for right pairs- when in1=1,in2=0 then clockwise and when in1=0,in2=1 then anti-clockwise
//in3,in4 for left pairs- when in3=1,in4=0 then clockwise and when in3=0,in4=1 then anti-clockwise
//---------------------------------------------------------
void sendData(unsigned char direction) {
	//using PORTD for this purpose
	PORTD=direction;
 274:	02 bb       	out	0x12, r16	; 18
 276:	1d c0       	rjmp	.+58     	; 0x2b2 <main+0xb6>
			forward();
		
		else if(acc_data[1]<=-3.0)
			backward();
		
		else if(acc_data[0]>=3.0)
 278:	c9 80       	ldd	r12, Y+1	; 0x01
 27a:	da 80       	ldd	r13, Y+2	; 0x02
 27c:	eb 80       	ldd	r14, Y+3	; 0x03
 27e:	fc 80       	ldd	r15, Y+4	; 0x04
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	40 e4       	ldi	r20, 0x40	; 64
 286:	50 e4       	ldi	r21, 0x40	; 64
 288:	c7 01       	movw	r24, r14
 28a:	b6 01       	movw	r22, r12
 28c:	0e 94 81 02 	call	0x502	; 0x502 <__gesf2>
 290:	88 23       	and	r24, r24
 292:	14 f0       	brlt	.+4      	; 0x298 <main+0x9c>
//in1,in2 for right pairs- when in1=1,in2=0 then clockwise and when in1=0,in2=1 then anti-clockwise
//in3,in4 for left pairs- when in3=1,in4=0 then clockwise and when in3=0,in4=1 then anti-clockwise
//---------------------------------------------------------
void sendData(unsigned char direction) {
	//using PORTD for this purpose
	PORTD=direction;
 294:	a2 ba       	out	0x12, r10	; 18
 296:	0d c0       	rjmp	.+26     	; 0x2b2 <main+0xb6>
			backward();
		
		else if(acc_data[0]>=3.0)
			right();
		
		else if(acc_data[0]<=-3.0)
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	40 e4       	ldi	r20, 0x40	; 64
 29e:	50 ec       	ldi	r21, 0xC0	; 192
 2a0:	c7 01       	movw	r24, r14
 2a2:	b6 01       	movw	r22, r12
 2a4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__cmpsf2>
 2a8:	18 16       	cp	r1, r24
 2aa:	14 f0       	brlt	.+4      	; 0x2b0 <main+0xb4>
//in1,in2 for right pairs- when in1=1,in2=0 then clockwise and when in1=0,in2=1 then anti-clockwise
//in3,in4 for left pairs- when in3=1,in4=0 then clockwise and when in3=0,in4=1 then anti-clockwise
//---------------------------------------------------------
void sendData(unsigned char direction) {
	//using PORTD for this purpose
	PORTD=direction;
 2ac:	b2 ba       	out	0x12, r11	; 18
 2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <main+0xb6>
 2b0:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	bf e3       	ldi	r27, 0x3F	; 63
 2b4:	2d e0       	ldi	r18, 0x0D	; 13
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	b1 50       	subi	r27, 0x01	; 1
 2ba:	20 40       	sbci	r18, 0x00	; 0
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0xbc>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0xc6>
 2c2:	00 00       	nop
 2c4:	b9 cf       	rjmp	.-142    	; 0x238 <main+0x3c>

000002c6 <__cmpsf2>:
 2c6:	a8 d0       	rcall	.+336    	; 0x418 <__fp_cmp>
 2c8:	08 f4       	brcc	.+2      	; 0x2cc <__cmpsf2+0x6>
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	08 95       	ret

000002ce <__divsf3>:
 2ce:	0c d0       	rcall	.+24     	; 0x2e8 <__divsf3x>
 2d0:	de c0       	rjmp	.+444    	; 0x48e <__fp_round>
 2d2:	d6 d0       	rcall	.+428    	; 0x480 <__fp_pscB>
 2d4:	40 f0       	brcs	.+16     	; 0x2e6 <__divsf3+0x18>
 2d6:	cd d0       	rcall	.+410    	; 0x472 <__fp_pscA>
 2d8:	30 f0       	brcs	.+12     	; 0x2e6 <__divsf3+0x18>
 2da:	21 f4       	brne	.+8      	; 0x2e4 <__divsf3+0x16>
 2dc:	5f 3f       	cpi	r21, 0xFF	; 255
 2de:	19 f0       	breq	.+6      	; 0x2e6 <__divsf3+0x18>
 2e0:	bf c0       	rjmp	.+382    	; 0x460 <__fp_inf>
 2e2:	51 11       	cpse	r21, r1
 2e4:	08 c1       	rjmp	.+528    	; 0x4f6 <__fp_szero>
 2e6:	c2 c0       	rjmp	.+388    	; 0x46c <__fp_nan>

000002e8 <__divsf3x>:
 2e8:	e3 d0       	rcall	.+454    	; 0x4b0 <__fp_split3>
 2ea:	98 f3       	brcs	.-26     	; 0x2d2 <__divsf3+0x4>

000002ec <__divsf3_pse>:
 2ec:	99 23       	and	r25, r25
 2ee:	c9 f3       	breq	.-14     	; 0x2e2 <__divsf3+0x14>
 2f0:	55 23       	and	r21, r21
 2f2:	b1 f3       	breq	.-20     	; 0x2e0 <__divsf3+0x12>
 2f4:	95 1b       	sub	r25, r21
 2f6:	55 0b       	sbc	r21, r21
 2f8:	bb 27       	eor	r27, r27
 2fa:	aa 27       	eor	r26, r26
 2fc:	62 17       	cp	r22, r18
 2fe:	73 07       	cpc	r23, r19
 300:	84 07       	cpc	r24, r20
 302:	38 f0       	brcs	.+14     	; 0x312 <__divsf3_pse+0x26>
 304:	9f 5f       	subi	r25, 0xFF	; 255
 306:	5f 4f       	sbci	r21, 0xFF	; 255
 308:	22 0f       	add	r18, r18
 30a:	33 1f       	adc	r19, r19
 30c:	44 1f       	adc	r20, r20
 30e:	aa 1f       	adc	r26, r26
 310:	a9 f3       	breq	.-22     	; 0x2fc <__divsf3_pse+0x10>
 312:	33 d0       	rcall	.+102    	; 0x37a <__divsf3_pse+0x8e>
 314:	0e 2e       	mov	r0, r30
 316:	3a f0       	brmi	.+14     	; 0x326 <__divsf3_pse+0x3a>
 318:	e0 e8       	ldi	r30, 0x80	; 128
 31a:	30 d0       	rcall	.+96     	; 0x37c <__divsf3_pse+0x90>
 31c:	91 50       	subi	r25, 0x01	; 1
 31e:	50 40       	sbci	r21, 0x00	; 0
 320:	e6 95       	lsr	r30
 322:	00 1c       	adc	r0, r0
 324:	ca f7       	brpl	.-14     	; 0x318 <__divsf3_pse+0x2c>
 326:	29 d0       	rcall	.+82     	; 0x37a <__divsf3_pse+0x8e>
 328:	fe 2f       	mov	r31, r30
 32a:	27 d0       	rcall	.+78     	; 0x37a <__divsf3_pse+0x8e>
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	88 1f       	adc	r24, r24
 332:	bb 1f       	adc	r27, r27
 334:	26 17       	cp	r18, r22
 336:	37 07       	cpc	r19, r23
 338:	48 07       	cpc	r20, r24
 33a:	ab 07       	cpc	r26, r27
 33c:	b0 e8       	ldi	r27, 0x80	; 128
 33e:	09 f0       	breq	.+2      	; 0x342 <__divsf3_pse+0x56>
 340:	bb 0b       	sbc	r27, r27
 342:	80 2d       	mov	r24, r0
 344:	bf 01       	movw	r22, r30
 346:	ff 27       	eor	r31, r31
 348:	93 58       	subi	r25, 0x83	; 131
 34a:	5f 4f       	sbci	r21, 0xFF	; 255
 34c:	2a f0       	brmi	.+10     	; 0x358 <__divsf3_pse+0x6c>
 34e:	9e 3f       	cpi	r25, 0xFE	; 254
 350:	51 05       	cpc	r21, r1
 352:	68 f0       	brcs	.+26     	; 0x36e <__divsf3_pse+0x82>
 354:	85 c0       	rjmp	.+266    	; 0x460 <__fp_inf>
 356:	cf c0       	rjmp	.+414    	; 0x4f6 <__fp_szero>
 358:	5f 3f       	cpi	r21, 0xFF	; 255
 35a:	ec f3       	brlt	.-6      	; 0x356 <__divsf3_pse+0x6a>
 35c:	98 3e       	cpi	r25, 0xE8	; 232
 35e:	dc f3       	brlt	.-10     	; 0x356 <__divsf3_pse+0x6a>
 360:	86 95       	lsr	r24
 362:	77 95       	ror	r23
 364:	67 95       	ror	r22
 366:	b7 95       	ror	r27
 368:	f7 95       	ror	r31
 36a:	9f 5f       	subi	r25, 0xFF	; 255
 36c:	c9 f7       	brne	.-14     	; 0x360 <__divsf3_pse+0x74>
 36e:	88 0f       	add	r24, r24
 370:	91 1d       	adc	r25, r1
 372:	96 95       	lsr	r25
 374:	87 95       	ror	r24
 376:	97 f9       	bld	r25, 7
 378:	08 95       	ret
 37a:	e1 e0       	ldi	r30, 0x01	; 1
 37c:	66 0f       	add	r22, r22
 37e:	77 1f       	adc	r23, r23
 380:	88 1f       	adc	r24, r24
 382:	bb 1f       	adc	r27, r27
 384:	62 17       	cp	r22, r18
 386:	73 07       	cpc	r23, r19
 388:	84 07       	cpc	r24, r20
 38a:	ba 07       	cpc	r27, r26
 38c:	20 f0       	brcs	.+8      	; 0x396 <__divsf3_pse+0xaa>
 38e:	62 1b       	sub	r22, r18
 390:	73 0b       	sbc	r23, r19
 392:	84 0b       	sbc	r24, r20
 394:	ba 0b       	sbc	r27, r26
 396:	ee 1f       	adc	r30, r30
 398:	88 f7       	brcc	.-30     	; 0x37c <__divsf3_pse+0x90>
 39a:	e0 95       	com	r30
 39c:	08 95       	ret

0000039e <__floatunsisf>:
 39e:	e8 94       	clt
 3a0:	09 c0       	rjmp	.+18     	; 0x3b4 <__floatsisf+0x12>

000003a2 <__floatsisf>:
 3a2:	97 fb       	bst	r25, 7
 3a4:	3e f4       	brtc	.+14     	; 0x3b4 <__floatsisf+0x12>
 3a6:	90 95       	com	r25
 3a8:	80 95       	com	r24
 3aa:	70 95       	com	r23
 3ac:	61 95       	neg	r22
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	8f 4f       	sbci	r24, 0xFF	; 255
 3b2:	9f 4f       	sbci	r25, 0xFF	; 255
 3b4:	99 23       	and	r25, r25
 3b6:	a9 f0       	breq	.+42     	; 0x3e2 <__floatsisf+0x40>
 3b8:	f9 2f       	mov	r31, r25
 3ba:	96 e9       	ldi	r25, 0x96	; 150
 3bc:	bb 27       	eor	r27, r27
 3be:	93 95       	inc	r25
 3c0:	f6 95       	lsr	r31
 3c2:	87 95       	ror	r24
 3c4:	77 95       	ror	r23
 3c6:	67 95       	ror	r22
 3c8:	b7 95       	ror	r27
 3ca:	f1 11       	cpse	r31, r1
 3cc:	f8 cf       	rjmp	.-16     	; 0x3be <__floatsisf+0x1c>
 3ce:	fa f4       	brpl	.+62     	; 0x40e <__floatsisf+0x6c>
 3d0:	bb 0f       	add	r27, r27
 3d2:	11 f4       	brne	.+4      	; 0x3d8 <__floatsisf+0x36>
 3d4:	60 ff       	sbrs	r22, 0
 3d6:	1b c0       	rjmp	.+54     	; 0x40e <__floatsisf+0x6c>
 3d8:	6f 5f       	subi	r22, 0xFF	; 255
 3da:	7f 4f       	sbci	r23, 0xFF	; 255
 3dc:	8f 4f       	sbci	r24, 0xFF	; 255
 3de:	9f 4f       	sbci	r25, 0xFF	; 255
 3e0:	16 c0       	rjmp	.+44     	; 0x40e <__floatsisf+0x6c>
 3e2:	88 23       	and	r24, r24
 3e4:	11 f0       	breq	.+4      	; 0x3ea <__floatsisf+0x48>
 3e6:	96 e9       	ldi	r25, 0x96	; 150
 3e8:	11 c0       	rjmp	.+34     	; 0x40c <__floatsisf+0x6a>
 3ea:	77 23       	and	r23, r23
 3ec:	21 f0       	breq	.+8      	; 0x3f6 <__floatsisf+0x54>
 3ee:	9e e8       	ldi	r25, 0x8E	; 142
 3f0:	87 2f       	mov	r24, r23
 3f2:	76 2f       	mov	r23, r22
 3f4:	05 c0       	rjmp	.+10     	; 0x400 <__floatsisf+0x5e>
 3f6:	66 23       	and	r22, r22
 3f8:	71 f0       	breq	.+28     	; 0x416 <__floatsisf+0x74>
 3fa:	96 e8       	ldi	r25, 0x86	; 134
 3fc:	86 2f       	mov	r24, r22
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	2a f0       	brmi	.+10     	; 0x40e <__floatsisf+0x6c>
 404:	9a 95       	dec	r25
 406:	66 0f       	add	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	88 1f       	adc	r24, r24
 40c:	da f7       	brpl	.-10     	; 0x404 <__floatsisf+0x62>
 40e:	88 0f       	add	r24, r24
 410:	96 95       	lsr	r25
 412:	87 95       	ror	r24
 414:	97 f9       	bld	r25, 7
 416:	08 95       	ret

00000418 <__fp_cmp>:
 418:	99 0f       	add	r25, r25
 41a:	00 08       	sbc	r0, r0
 41c:	55 0f       	add	r21, r21
 41e:	aa 0b       	sbc	r26, r26
 420:	e0 e8       	ldi	r30, 0x80	; 128
 422:	fe ef       	ldi	r31, 0xFE	; 254
 424:	16 16       	cp	r1, r22
 426:	17 06       	cpc	r1, r23
 428:	e8 07       	cpc	r30, r24
 42a:	f9 07       	cpc	r31, r25
 42c:	c0 f0       	brcs	.+48     	; 0x45e <__fp_cmp+0x46>
 42e:	12 16       	cp	r1, r18
 430:	13 06       	cpc	r1, r19
 432:	e4 07       	cpc	r30, r20
 434:	f5 07       	cpc	r31, r21
 436:	98 f0       	brcs	.+38     	; 0x45e <__fp_cmp+0x46>
 438:	62 1b       	sub	r22, r18
 43a:	73 0b       	sbc	r23, r19
 43c:	84 0b       	sbc	r24, r20
 43e:	95 0b       	sbc	r25, r21
 440:	39 f4       	brne	.+14     	; 0x450 <__fp_cmp+0x38>
 442:	0a 26       	eor	r0, r26
 444:	61 f0       	breq	.+24     	; 0x45e <__fp_cmp+0x46>
 446:	23 2b       	or	r18, r19
 448:	24 2b       	or	r18, r20
 44a:	25 2b       	or	r18, r21
 44c:	21 f4       	brne	.+8      	; 0x456 <__fp_cmp+0x3e>
 44e:	08 95       	ret
 450:	0a 26       	eor	r0, r26
 452:	09 f4       	brne	.+2      	; 0x456 <__fp_cmp+0x3e>
 454:	a1 40       	sbci	r26, 0x01	; 1
 456:	a6 95       	lsr	r26
 458:	8f ef       	ldi	r24, 0xFF	; 255
 45a:	81 1d       	adc	r24, r1
 45c:	81 1d       	adc	r24, r1
 45e:	08 95       	ret

00000460 <__fp_inf>:
 460:	97 f9       	bld	r25, 7
 462:	9f 67       	ori	r25, 0x7F	; 127
 464:	80 e8       	ldi	r24, 0x80	; 128
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	08 95       	ret

0000046c <__fp_nan>:
 46c:	9f ef       	ldi	r25, 0xFF	; 255
 46e:	80 ec       	ldi	r24, 0xC0	; 192
 470:	08 95       	ret

00000472 <__fp_pscA>:
 472:	00 24       	eor	r0, r0
 474:	0a 94       	dec	r0
 476:	16 16       	cp	r1, r22
 478:	17 06       	cpc	r1, r23
 47a:	18 06       	cpc	r1, r24
 47c:	09 06       	cpc	r0, r25
 47e:	08 95       	ret

00000480 <__fp_pscB>:
 480:	00 24       	eor	r0, r0
 482:	0a 94       	dec	r0
 484:	12 16       	cp	r1, r18
 486:	13 06       	cpc	r1, r19
 488:	14 06       	cpc	r1, r20
 48a:	05 06       	cpc	r0, r21
 48c:	08 95       	ret

0000048e <__fp_round>:
 48e:	09 2e       	mov	r0, r25
 490:	03 94       	inc	r0
 492:	00 0c       	add	r0, r0
 494:	11 f4       	brne	.+4      	; 0x49a <__fp_round+0xc>
 496:	88 23       	and	r24, r24
 498:	52 f0       	brmi	.+20     	; 0x4ae <__fp_round+0x20>
 49a:	bb 0f       	add	r27, r27
 49c:	40 f4       	brcc	.+16     	; 0x4ae <__fp_round+0x20>
 49e:	bf 2b       	or	r27, r31
 4a0:	11 f4       	brne	.+4      	; 0x4a6 <__fp_round+0x18>
 4a2:	60 ff       	sbrs	r22, 0
 4a4:	04 c0       	rjmp	.+8      	; 0x4ae <__fp_round+0x20>
 4a6:	6f 5f       	subi	r22, 0xFF	; 255
 4a8:	7f 4f       	sbci	r23, 0xFF	; 255
 4aa:	8f 4f       	sbci	r24, 0xFF	; 255
 4ac:	9f 4f       	sbci	r25, 0xFF	; 255
 4ae:	08 95       	ret

000004b0 <__fp_split3>:
 4b0:	57 fd       	sbrc	r21, 7
 4b2:	90 58       	subi	r25, 0x80	; 128
 4b4:	44 0f       	add	r20, r20
 4b6:	55 1f       	adc	r21, r21
 4b8:	59 f0       	breq	.+22     	; 0x4d0 <__fp_splitA+0x10>
 4ba:	5f 3f       	cpi	r21, 0xFF	; 255
 4bc:	71 f0       	breq	.+28     	; 0x4da <__fp_splitA+0x1a>
 4be:	47 95       	ror	r20

000004c0 <__fp_splitA>:
 4c0:	88 0f       	add	r24, r24
 4c2:	97 fb       	bst	r25, 7
 4c4:	99 1f       	adc	r25, r25
 4c6:	61 f0       	breq	.+24     	; 0x4e0 <__fp_splitA+0x20>
 4c8:	9f 3f       	cpi	r25, 0xFF	; 255
 4ca:	79 f0       	breq	.+30     	; 0x4ea <__fp_splitA+0x2a>
 4cc:	87 95       	ror	r24
 4ce:	08 95       	ret
 4d0:	12 16       	cp	r1, r18
 4d2:	13 06       	cpc	r1, r19
 4d4:	14 06       	cpc	r1, r20
 4d6:	55 1f       	adc	r21, r21
 4d8:	f2 cf       	rjmp	.-28     	; 0x4be <__fp_split3+0xe>
 4da:	46 95       	lsr	r20
 4dc:	f1 df       	rcall	.-30     	; 0x4c0 <__fp_splitA>
 4de:	08 c0       	rjmp	.+16     	; 0x4f0 <__fp_splitA+0x30>
 4e0:	16 16       	cp	r1, r22
 4e2:	17 06       	cpc	r1, r23
 4e4:	18 06       	cpc	r1, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	f1 cf       	rjmp	.-30     	; 0x4cc <__fp_splitA+0xc>
 4ea:	86 95       	lsr	r24
 4ec:	71 05       	cpc	r23, r1
 4ee:	61 05       	cpc	r22, r1
 4f0:	08 94       	sec
 4f2:	08 95       	ret

000004f4 <__fp_zero>:
 4f4:	e8 94       	clt

000004f6 <__fp_szero>:
 4f6:	bb 27       	eor	r27, r27
 4f8:	66 27       	eor	r22, r22
 4fa:	77 27       	eor	r23, r23
 4fc:	cb 01       	movw	r24, r22
 4fe:	97 f9       	bld	r25, 7
 500:	08 95       	ret

00000502 <__gesf2>:
 502:	8a df       	rcall	.-236    	; 0x418 <__fp_cmp>
 504:	08 f4       	brcc	.+2      	; 0x508 <__gesf2+0x6>
 506:	8f ef       	ldi	r24, 0xFF	; 255
 508:	08 95       	ret

0000050a <__mulsf3>:
 50a:	0b d0       	rcall	.+22     	; 0x522 <__mulsf3x>
 50c:	c0 cf       	rjmp	.-128    	; 0x48e <__fp_round>
 50e:	b1 df       	rcall	.-158    	; 0x472 <__fp_pscA>
 510:	28 f0       	brcs	.+10     	; 0x51c <__mulsf3+0x12>
 512:	b6 df       	rcall	.-148    	; 0x480 <__fp_pscB>
 514:	18 f0       	brcs	.+6      	; 0x51c <__mulsf3+0x12>
 516:	95 23       	and	r25, r21
 518:	09 f0       	breq	.+2      	; 0x51c <__mulsf3+0x12>
 51a:	a2 cf       	rjmp	.-188    	; 0x460 <__fp_inf>
 51c:	a7 cf       	rjmp	.-178    	; 0x46c <__fp_nan>
 51e:	11 24       	eor	r1, r1
 520:	ea cf       	rjmp	.-44     	; 0x4f6 <__fp_szero>

00000522 <__mulsf3x>:
 522:	c6 df       	rcall	.-116    	; 0x4b0 <__fp_split3>
 524:	a0 f3       	brcs	.-24     	; 0x50e <__mulsf3+0x4>

00000526 <__mulsf3_pse>:
 526:	95 9f       	mul	r25, r21
 528:	d1 f3       	breq	.-12     	; 0x51e <__mulsf3+0x14>
 52a:	95 0f       	add	r25, r21
 52c:	50 e0       	ldi	r21, 0x00	; 0
 52e:	55 1f       	adc	r21, r21
 530:	62 9f       	mul	r22, r18
 532:	f0 01       	movw	r30, r0
 534:	72 9f       	mul	r23, r18
 536:	bb 27       	eor	r27, r27
 538:	f0 0d       	add	r31, r0
 53a:	b1 1d       	adc	r27, r1
 53c:	63 9f       	mul	r22, r19
 53e:	aa 27       	eor	r26, r26
 540:	f0 0d       	add	r31, r0
 542:	b1 1d       	adc	r27, r1
 544:	aa 1f       	adc	r26, r26
 546:	64 9f       	mul	r22, r20
 548:	66 27       	eor	r22, r22
 54a:	b0 0d       	add	r27, r0
 54c:	a1 1d       	adc	r26, r1
 54e:	66 1f       	adc	r22, r22
 550:	82 9f       	mul	r24, r18
 552:	22 27       	eor	r18, r18
 554:	b0 0d       	add	r27, r0
 556:	a1 1d       	adc	r26, r1
 558:	62 1f       	adc	r22, r18
 55a:	73 9f       	mul	r23, r19
 55c:	b0 0d       	add	r27, r0
 55e:	a1 1d       	adc	r26, r1
 560:	62 1f       	adc	r22, r18
 562:	83 9f       	mul	r24, r19
 564:	a0 0d       	add	r26, r0
 566:	61 1d       	adc	r22, r1
 568:	22 1f       	adc	r18, r18
 56a:	74 9f       	mul	r23, r20
 56c:	33 27       	eor	r19, r19
 56e:	a0 0d       	add	r26, r0
 570:	61 1d       	adc	r22, r1
 572:	23 1f       	adc	r18, r19
 574:	84 9f       	mul	r24, r20
 576:	60 0d       	add	r22, r0
 578:	21 1d       	adc	r18, r1
 57a:	82 2f       	mov	r24, r18
 57c:	76 2f       	mov	r23, r22
 57e:	6a 2f       	mov	r22, r26
 580:	11 24       	eor	r1, r1
 582:	9f 57       	subi	r25, 0x7F	; 127
 584:	50 40       	sbci	r21, 0x00	; 0
 586:	8a f0       	brmi	.+34     	; 0x5aa <__mulsf3_pse+0x84>
 588:	e1 f0       	breq	.+56     	; 0x5c2 <__mulsf3_pse+0x9c>
 58a:	88 23       	and	r24, r24
 58c:	4a f0       	brmi	.+18     	; 0x5a0 <__mulsf3_pse+0x7a>
 58e:	ee 0f       	add	r30, r30
 590:	ff 1f       	adc	r31, r31
 592:	bb 1f       	adc	r27, r27
 594:	66 1f       	adc	r22, r22
 596:	77 1f       	adc	r23, r23
 598:	88 1f       	adc	r24, r24
 59a:	91 50       	subi	r25, 0x01	; 1
 59c:	50 40       	sbci	r21, 0x00	; 0
 59e:	a9 f7       	brne	.-22     	; 0x58a <__mulsf3_pse+0x64>
 5a0:	9e 3f       	cpi	r25, 0xFE	; 254
 5a2:	51 05       	cpc	r21, r1
 5a4:	70 f0       	brcs	.+28     	; 0x5c2 <__mulsf3_pse+0x9c>
 5a6:	5c cf       	rjmp	.-328    	; 0x460 <__fp_inf>
 5a8:	a6 cf       	rjmp	.-180    	; 0x4f6 <__fp_szero>
 5aa:	5f 3f       	cpi	r21, 0xFF	; 255
 5ac:	ec f3       	brlt	.-6      	; 0x5a8 <__mulsf3_pse+0x82>
 5ae:	98 3e       	cpi	r25, 0xE8	; 232
 5b0:	dc f3       	brlt	.-10     	; 0x5a8 <__mulsf3_pse+0x82>
 5b2:	86 95       	lsr	r24
 5b4:	77 95       	ror	r23
 5b6:	67 95       	ror	r22
 5b8:	b7 95       	ror	r27
 5ba:	f7 95       	ror	r31
 5bc:	e7 95       	ror	r30
 5be:	9f 5f       	subi	r25, 0xFF	; 255
 5c0:	c1 f7       	brne	.-16     	; 0x5b2 <__mulsf3_pse+0x8c>
 5c2:	fe 2b       	or	r31, r30
 5c4:	88 0f       	add	r24, r24
 5c6:	91 1d       	adc	r25, r1
 5c8:	96 95       	lsr	r25
 5ca:	87 95       	ror	r24
 5cc:	97 f9       	bld	r25, 7
 5ce:	08 95       	ret

000005d0 <_exit>:
 5d0:	f8 94       	cli

000005d2 <__stop_program>:
 5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <__stop_program>
