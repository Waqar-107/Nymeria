
Nymeria.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000c0  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000007af  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000032c  00000000  00000000  00000ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002d7  00000000  00000000  000011eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000170  00000000  00000000  000014c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001eb  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002af  00000000  00000000  0000181f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000108  00000000  00000000  00001ace  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
  64:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADXL_write>:
	TWI_Ini();
	ADXL_write(0x2D,0x08);
}

void ADXL_write(char address,char data)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	d8 2f       	mov	r29, r24
  72:	c6 2f       	mov	r28, r22
	
	TWI_start();
  74:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <TWI_start>
	TWI_write(dev_write);
  78:	86 ea       	ldi	r24, 0xA6	; 166
  7a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <TWI_write>
	TWI_write(address);
  7e:	8d 2f       	mov	r24, r29
  80:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <TWI_write>
	TWI_write(data);
  84:	8c 2f       	mov	r24, r28
  86:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <TWI_write>
	TWI_stop();
  8a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TWI_stop>
}
  8e:	df 91       	pop	r29
  90:	cf 91       	pop	r28
  92:	08 95       	ret

00000094 <ADXL_init>:
 */ 

#include "ADXL345_I2C.h"
void ADXL_init()
{
	TWI_Ini();
  94:	0e 94 d5 00 	call	0x1aa	; 0x1aa <TWI_Ini>
	ADXL_write(0x2D,0x08);
  98:	68 e0       	ldi	r22, 0x08	; 8
  9a:	8d e2       	ldi	r24, 0x2D	; 45
  9c:	0e 94 36 00 	call	0x6c	; 0x6c <ADXL_write>
  a0:	08 95       	ret

000000a2 <ADXL_Acc>:
	TWI_stop();
}


void ADXL_Acc(float data_array[])
{
  a2:	cf 92       	push	r12
  a4:	df 92       	push	r13
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	ec 01       	movw	r28, r24
	int x0,x1,y0,y1,z0,z1;
	TWI_start();
  b4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <TWI_start>
	TWI_write(dev_write);
  b8:	86 ea       	ldi	r24, 0xA6	; 166
  ba:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <TWI_write>
	TWI_write(x0_address);
  be:	82 e3       	ldi	r24, 0x32	; 50
  c0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <TWI_write>
	TWI_start();
  c4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <TWI_start>
	TWI_write(dev_read);
  c8:	87 ea       	ldi	r24, 0xA7	; 167
  ca:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <TWI_write>
	x0=TWI_read(ACKM);
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <TWI_read>
  d4:	c8 2e       	mov	r12, r24
	x1=TWI_read(ACKM);
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <TWI_read>
  dc:	d8 2e       	mov	r13, r24
	y0=TWI_read(ACKM);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <TWI_read>
  e4:	e8 2e       	mov	r14, r24
	y1=TWI_read(ACKM);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <TWI_read>
  ec:	f8 2e       	mov	r15, r24
	z0=TWI_read(ACKM);
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <TWI_read>
  f4:	08 2f       	mov	r16, r24
	z1=TWI_read(NACKM);
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <TWI_read>
  fc:	18 2f       	mov	r17, r24
	TWI_stop();
  fe:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TWI_stop>
	data_array[0]=((x1<<8)|x0)*g/sensitivity;
 102:	6c 2d       	mov	r22, r12
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	7d 29       	or	r23, r13
 108:	88 27       	eor	r24, r24
 10a:	77 fd       	sbrc	r23, 7
 10c:	80 95       	com	r24
 10e:	98 2f       	mov	r25, r24
 110:	0e 94 cd 01 	call	0x39a	; 0x39a <__floatsisf>
 114:	2d ec       	ldi	r18, 0xCD	; 205
 116:	3c ec       	ldi	r19, 0xCC	; 204
 118:	4c e1       	ldi	r20, 0x1C	; 28
 11a:	51 e4       	ldi	r21, 0x41	; 65
 11c:	0e 94 81 02 	call	0x502	; 0x502 <__mulsf3>
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	4d e8       	ldi	r20, 0x8D	; 141
 126:	53 e4       	ldi	r21, 0x43	; 67
 128:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__divsf3>
 12c:	68 83       	st	Y, r22
 12e:	79 83       	std	Y+1, r23	; 0x01
 130:	8a 83       	std	Y+2, r24	; 0x02
 132:	9b 83       	std	Y+3, r25	; 0x03
	data_array[1]=((y1<<8)|y0)*g/sensitivity;
 134:	6e 2d       	mov	r22, r14
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	7f 29       	or	r23, r15
 13a:	88 27       	eor	r24, r24
 13c:	77 fd       	sbrc	r23, 7
 13e:	80 95       	com	r24
 140:	98 2f       	mov	r25, r24
 142:	0e 94 cd 01 	call	0x39a	; 0x39a <__floatsisf>
 146:	2d ec       	ldi	r18, 0xCD	; 205
 148:	3c ec       	ldi	r19, 0xCC	; 204
 14a:	4c e1       	ldi	r20, 0x1C	; 28
 14c:	51 e4       	ldi	r21, 0x41	; 65
 14e:	0e 94 81 02 	call	0x502	; 0x502 <__mulsf3>
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	4d e8       	ldi	r20, 0x8D	; 141
 158:	53 e4       	ldi	r21, 0x43	; 67
 15a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__divsf3>
 15e:	6c 83       	std	Y+4, r22	; 0x04
 160:	7d 83       	std	Y+5, r23	; 0x05
 162:	8e 83       	std	Y+6, r24	; 0x06
 164:	9f 83       	std	Y+7, r25	; 0x07
	data_array[2]=((z1<<8)|z0)*g/sensitivity ;
 166:	60 2f       	mov	r22, r16
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	71 2b       	or	r23, r17
 16c:	88 27       	eor	r24, r24
 16e:	77 fd       	sbrc	r23, 7
 170:	80 95       	com	r24
 172:	98 2f       	mov	r25, r24
 174:	0e 94 cd 01 	call	0x39a	; 0x39a <__floatsisf>
 178:	2d ec       	ldi	r18, 0xCD	; 205
 17a:	3c ec       	ldi	r19, 0xCC	; 204
 17c:	4c e1       	ldi	r20, 0x1C	; 28
 17e:	51 e4       	ldi	r21, 0x41	; 65
 180:	0e 94 81 02 	call	0x502	; 0x502 <__mulsf3>
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	4d e8       	ldi	r20, 0x8D	; 141
 18a:	53 e4       	ldi	r21, 0x43	; 67
 18c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__divsf3>
 190:	68 87       	std	Y+8, r22	; 0x08
 192:	79 87       	std	Y+9, r23	; 0x09
 194:	8a 87       	std	Y+10, r24	; 0x0a
 196:	9b 87       	std	Y+11, r25	; 0x0b
	
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	ff 90       	pop	r15
 1a2:	ef 90       	pop	r14
 1a4:	df 90       	pop	r13
 1a6:	cf 90       	pop	r12
 1a8:	08 95       	ret

000001aa <TWI_Ini>:
#include "I2C_master.h"

void TWI_Ini(void)
{
	TWBR = 32;
 1aa:	80 e2       	ldi	r24, 0x20	; 32
 1ac:	80 b9       	out	0x00, r24	; 0
	TWSR = 0x00;
 1ae:	11 b8       	out	0x01, r1	; 1
 1b0:	08 95       	ret

000001b2 <TWI_start>:
}


void TWI_start(void)
{
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 1b2:	84 ea       	ldi	r24, 0xA4	; 164
 1b4:	86 bf       	out	0x36, r24	; 54
	while (!( TWCR & (1<<TWINT) ) );
 1b6:	06 b6       	in	r0, 0x36	; 54
 1b8:	07 fe       	sbrs	r0, 7
 1ba:	fd cf       	rjmp	.-6      	; 0x1b6 <TWI_start+0x4>
	
	if ( !(( (TWSR & 0xF8) ==start) || ( (TWSR & 0xF8) == repeated_start)) )
 1bc:	81 b1       	in	r24, 0x01	; 1
 1be:	88 7f       	andi	r24, 0xF8	; 248
 1c0:	88 30       	cpi	r24, 0x08	; 8
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <TWI_start+0x1e>
 1c4:	81 b1       	in	r24, 0x01	; 1
 1c6:	88 7f       	andi	r24, 0xF8	; 248
 1c8:	80 31       	cpi	r24, 0x10	; 16
 1ca:	11 f0       	breq	.+4      	; 0x1d0 <TWI_start+0x1e>
	{
		TWI_start();
 1cc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <TWI_start>
 1d0:	08 95       	ret

000001d2 <TWI_stop>:
	}
}

void TWI_stop(void)
{
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN) ;
 1d2:	84 e9       	ldi	r24, 0x94	; 148
 1d4:	86 bf       	out	0x36, r24	; 54
 1d6:	08 95       	ret

000001d8 <TWI_write>:



void TWI_write(char data)
{
	TWDR = data;
 1d8:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 1da:	84 e8       	ldi	r24, 0x84	; 132
 1dc:	86 bf       	out	0x36, r24	; 54
	while ( !( TWCR & (1<<TWINT) ) );
 1de:	06 b6       	in	r0, 0x36	; 54
 1e0:	07 fe       	sbrs	r0, 7
 1e2:	fd cf       	rjmp	.-6      	; 0x1de <TWI_write+0x6>
	
}
 1e4:	08 95       	ret

000001e6 <TWI_read>:


char TWI_read(char ACKM_NACKM)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (ACKM_NACKM<<TWEA);
 1e6:	20 e4       	ldi	r18, 0x40	; 64
 1e8:	82 9f       	mul	r24, r18
 1ea:	c0 01       	movw	r24, r0
 1ec:	11 24       	eor	r1, r1
 1ee:	84 68       	ori	r24, 0x84	; 132
 1f0:	86 bf       	out	0x36, r24	; 54
	while ( !( TWCR & (1<<TWINT) ) );
 1f2:	06 b6       	in	r0, 0x36	; 54
 1f4:	07 fe       	sbrs	r0, 7
 1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <TWI_read+0xc>
	return TWDR;
 1f8:	83 b1       	in	r24, 0x03	; 3
 1fa:	08 95       	ret

000001fc <main>:
	sendData(direction);
}
//---------------------------------------------------------

int main(void)
{
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	2c 97       	sbiw	r28, 0x0c	; 12
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	f8 94       	cli
 20a:	de bf       	out	0x3e, r29	; 62
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	cd bf       	out	0x3d, r28	; 61
	DDRD=0xFF;
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	81 bb       	out	0x11, r24	; 17
	DDRC=0x00;
 214:	14 ba       	out	0x14, r1	; 20
	DDRA=0xFF;
 216:	8a bb       	out	0x1a, r24	; 26
	
	ADXL_init();
 218:	0e 94 4a 00 	call	0x94	; 0x94 <ADXL_init>
	
	float acc_data[3]={0};
 21c:	fe 01       	movw	r30, r28
 21e:	31 96       	adiw	r30, 0x01	; 1
 220:	8c e0       	ldi	r24, 0x0C	; 12
 222:	df 01       	movw	r26, r30
 224:	1d 92       	st	X+, r1
 226:	8a 95       	dec	r24
 228:	e9 f7       	brne	.-6      	; 0x224 <main+0x28>
#include "ADXL345_I2C.h"

//---------------------------------------------------------
void sendData(unsigned char direction) {
	//using PORTD for this purpose
	PORTD=direction;
 22a:	0f 2e       	mov	r0, r31
 22c:	ff e0       	ldi	r31, 0x0F	; 15
 22e:	af 2e       	mov	r10, r31
 230:	f0 2d       	mov	r31, r0
 232:	68 94       	set
 234:	bb 24       	eor	r11, r11
 236:	b2 f8       	bld	r11, 2
 238:	68 94       	set
 23a:	99 24       	eor	r9, r9
 23c:	93 f8       	bld	r9, 3
 23e:	02 e0       	ldi	r16, 0x02	; 2
 240:	11 e0       	ldi	r17, 0x01	; 1
	
	float acc_data[3]={0};
	
	while(1)
	{
		ADXL_Acc(acc_data);
 242:	ce 01       	movw	r24, r28
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	0e 94 51 00 	call	0xa2	; 0xa2 <ADXL_Acc>
		
		if(acc_data[1]>=4.0)
 24a:	cd 80       	ldd	r12, Y+5	; 0x05
 24c:	de 80       	ldd	r13, Y+6	; 0x06
 24e:	ef 80       	ldd	r14, Y+7	; 0x07
 250:	f8 84       	ldd	r15, Y+8	; 0x08
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	40 e8       	ldi	r20, 0x80	; 128
 258:	50 e4       	ldi	r21, 0x40	; 64
 25a:	c7 01       	movw	r24, r14
 25c:	b6 01       	movw	r22, r12
 25e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__gesf2>
 262:	88 23       	and	r24, r24
 264:	14 f0       	brlt	.+4      	; 0x26a <main+0x6e>
#include "ADXL345_I2C.h"

//---------------------------------------------------------
void sendData(unsigned char direction) {
	//using PORTD for this purpose
	PORTD=direction;
 266:	12 bb       	out	0x12, r17	; 18
 268:	ec cf       	rjmp	.-40     	; 0x242 <main+0x46>
		ADXL_Acc(acc_data);
		
		if(acc_data[1]>=4.0)
			forward();
		
		else if(acc_data[1]<=-4.0)
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	40 e8       	ldi	r20, 0x80	; 128
 270:	50 ec       	ldi	r21, 0xC0	; 192
 272:	c7 01       	movw	r24, r14
 274:	b6 01       	movw	r22, r12
 276:	0e 94 5f 01 	call	0x2be	; 0x2be <__cmpsf2>
 27a:	18 16       	cp	r1, r24
 27c:	14 f0       	brlt	.+4      	; 0x282 <main+0x86>
#include "ADXL345_I2C.h"

//---------------------------------------------------------
void sendData(unsigned char direction) {
	//using PORTD for this purpose
	PORTD=direction;
 27e:	02 bb       	out	0x12, r16	; 18
 280:	e0 cf       	rjmp	.-64     	; 0x242 <main+0x46>
			forward();
		
		else if(acc_data[1]<=-4.0)
			backward();
		
		else if(acc_data[0]>=4.0)
 282:	c9 80       	ldd	r12, Y+1	; 0x01
 284:	da 80       	ldd	r13, Y+2	; 0x02
 286:	eb 80       	ldd	r14, Y+3	; 0x03
 288:	fc 80       	ldd	r15, Y+4	; 0x04
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	40 e8       	ldi	r20, 0x80	; 128
 290:	50 e4       	ldi	r21, 0x40	; 64
 292:	c7 01       	movw	r24, r14
 294:	b6 01       	movw	r22, r12
 296:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__gesf2>
 29a:	88 23       	and	r24, r24
 29c:	14 f0       	brlt	.+4      	; 0x2a2 <main+0xa6>
#include "ADXL345_I2C.h"

//---------------------------------------------------------
void sendData(unsigned char direction) {
	//using PORTD for this purpose
	PORTD=direction;
 29e:	92 ba       	out	0x12, r9	; 18
 2a0:	d0 cf       	rjmp	.-96     	; 0x242 <main+0x46>
			backward();
		
		else if(acc_data[0]>=4.0)
			right();
		
		else if(acc_data[0]<=-4.0)
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	40 e8       	ldi	r20, 0x80	; 128
 2a8:	50 ec       	ldi	r21, 0xC0	; 192
 2aa:	c7 01       	movw	r24, r14
 2ac:	b6 01       	movw	r22, r12
 2ae:	0e 94 5f 01 	call	0x2be	; 0x2be <__cmpsf2>
 2b2:	18 16       	cp	r1, r24
 2b4:	14 f0       	brlt	.+4      	; 0x2ba <main+0xbe>
#include "ADXL345_I2C.h"

//---------------------------------------------------------
void sendData(unsigned char direction) {
	//using PORTD for this purpose
	PORTD=direction;
 2b6:	b2 ba       	out	0x12, r11	; 18
 2b8:	c4 cf       	rjmp	.-120    	; 0x242 <main+0x46>
 2ba:	a2 ba       	out	0x12, r10	; 18
 2bc:	c2 cf       	rjmp	.-124    	; 0x242 <main+0x46>

000002be <__cmpsf2>:
 2be:	a8 d0       	rcall	.+336    	; 0x410 <__fp_cmp>
 2c0:	08 f4       	brcc	.+2      	; 0x2c4 <__cmpsf2+0x6>
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	08 95       	ret

000002c6 <__divsf3>:
 2c6:	0c d0       	rcall	.+24     	; 0x2e0 <__divsf3x>
 2c8:	de c0       	rjmp	.+444    	; 0x486 <__fp_round>
 2ca:	d6 d0       	rcall	.+428    	; 0x478 <__fp_pscB>
 2cc:	40 f0       	brcs	.+16     	; 0x2de <__divsf3+0x18>
 2ce:	cd d0       	rcall	.+410    	; 0x46a <__fp_pscA>
 2d0:	30 f0       	brcs	.+12     	; 0x2de <__divsf3+0x18>
 2d2:	21 f4       	brne	.+8      	; 0x2dc <__divsf3+0x16>
 2d4:	5f 3f       	cpi	r21, 0xFF	; 255
 2d6:	19 f0       	breq	.+6      	; 0x2de <__divsf3+0x18>
 2d8:	bf c0       	rjmp	.+382    	; 0x458 <__fp_inf>
 2da:	51 11       	cpse	r21, r1
 2dc:	08 c1       	rjmp	.+528    	; 0x4ee <__fp_szero>
 2de:	c2 c0       	rjmp	.+388    	; 0x464 <__fp_nan>

000002e0 <__divsf3x>:
 2e0:	e3 d0       	rcall	.+454    	; 0x4a8 <__fp_split3>
 2e2:	98 f3       	brcs	.-26     	; 0x2ca <__divsf3+0x4>

000002e4 <__divsf3_pse>:
 2e4:	99 23       	and	r25, r25
 2e6:	c9 f3       	breq	.-14     	; 0x2da <__divsf3+0x14>
 2e8:	55 23       	and	r21, r21
 2ea:	b1 f3       	breq	.-20     	; 0x2d8 <__divsf3+0x12>
 2ec:	95 1b       	sub	r25, r21
 2ee:	55 0b       	sbc	r21, r21
 2f0:	bb 27       	eor	r27, r27
 2f2:	aa 27       	eor	r26, r26
 2f4:	62 17       	cp	r22, r18
 2f6:	73 07       	cpc	r23, r19
 2f8:	84 07       	cpc	r24, r20
 2fa:	38 f0       	brcs	.+14     	; 0x30a <__divsf3_pse+0x26>
 2fc:	9f 5f       	subi	r25, 0xFF	; 255
 2fe:	5f 4f       	sbci	r21, 0xFF	; 255
 300:	22 0f       	add	r18, r18
 302:	33 1f       	adc	r19, r19
 304:	44 1f       	adc	r20, r20
 306:	aa 1f       	adc	r26, r26
 308:	a9 f3       	breq	.-22     	; 0x2f4 <__divsf3_pse+0x10>
 30a:	33 d0       	rcall	.+102    	; 0x372 <__divsf3_pse+0x8e>
 30c:	0e 2e       	mov	r0, r30
 30e:	3a f0       	brmi	.+14     	; 0x31e <__divsf3_pse+0x3a>
 310:	e0 e8       	ldi	r30, 0x80	; 128
 312:	30 d0       	rcall	.+96     	; 0x374 <__divsf3_pse+0x90>
 314:	91 50       	subi	r25, 0x01	; 1
 316:	50 40       	sbci	r21, 0x00	; 0
 318:	e6 95       	lsr	r30
 31a:	00 1c       	adc	r0, r0
 31c:	ca f7       	brpl	.-14     	; 0x310 <__divsf3_pse+0x2c>
 31e:	29 d0       	rcall	.+82     	; 0x372 <__divsf3_pse+0x8e>
 320:	fe 2f       	mov	r31, r30
 322:	27 d0       	rcall	.+78     	; 0x372 <__divsf3_pse+0x8e>
 324:	66 0f       	add	r22, r22
 326:	77 1f       	adc	r23, r23
 328:	88 1f       	adc	r24, r24
 32a:	bb 1f       	adc	r27, r27
 32c:	26 17       	cp	r18, r22
 32e:	37 07       	cpc	r19, r23
 330:	48 07       	cpc	r20, r24
 332:	ab 07       	cpc	r26, r27
 334:	b0 e8       	ldi	r27, 0x80	; 128
 336:	09 f0       	breq	.+2      	; 0x33a <__divsf3_pse+0x56>
 338:	bb 0b       	sbc	r27, r27
 33a:	80 2d       	mov	r24, r0
 33c:	bf 01       	movw	r22, r30
 33e:	ff 27       	eor	r31, r31
 340:	93 58       	subi	r25, 0x83	; 131
 342:	5f 4f       	sbci	r21, 0xFF	; 255
 344:	2a f0       	brmi	.+10     	; 0x350 <__divsf3_pse+0x6c>
 346:	9e 3f       	cpi	r25, 0xFE	; 254
 348:	51 05       	cpc	r21, r1
 34a:	68 f0       	brcs	.+26     	; 0x366 <__divsf3_pse+0x82>
 34c:	85 c0       	rjmp	.+266    	; 0x458 <__fp_inf>
 34e:	cf c0       	rjmp	.+414    	; 0x4ee <__fp_szero>
 350:	5f 3f       	cpi	r21, 0xFF	; 255
 352:	ec f3       	brlt	.-6      	; 0x34e <__divsf3_pse+0x6a>
 354:	98 3e       	cpi	r25, 0xE8	; 232
 356:	dc f3       	brlt	.-10     	; 0x34e <__divsf3_pse+0x6a>
 358:	86 95       	lsr	r24
 35a:	77 95       	ror	r23
 35c:	67 95       	ror	r22
 35e:	b7 95       	ror	r27
 360:	f7 95       	ror	r31
 362:	9f 5f       	subi	r25, 0xFF	; 255
 364:	c9 f7       	brne	.-14     	; 0x358 <__divsf3_pse+0x74>
 366:	88 0f       	add	r24, r24
 368:	91 1d       	adc	r25, r1
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	97 f9       	bld	r25, 7
 370:	08 95       	ret
 372:	e1 e0       	ldi	r30, 0x01	; 1
 374:	66 0f       	add	r22, r22
 376:	77 1f       	adc	r23, r23
 378:	88 1f       	adc	r24, r24
 37a:	bb 1f       	adc	r27, r27
 37c:	62 17       	cp	r22, r18
 37e:	73 07       	cpc	r23, r19
 380:	84 07       	cpc	r24, r20
 382:	ba 07       	cpc	r27, r26
 384:	20 f0       	brcs	.+8      	; 0x38e <__divsf3_pse+0xaa>
 386:	62 1b       	sub	r22, r18
 388:	73 0b       	sbc	r23, r19
 38a:	84 0b       	sbc	r24, r20
 38c:	ba 0b       	sbc	r27, r26
 38e:	ee 1f       	adc	r30, r30
 390:	88 f7       	brcc	.-30     	; 0x374 <__divsf3_pse+0x90>
 392:	e0 95       	com	r30
 394:	08 95       	ret

00000396 <__floatunsisf>:
 396:	e8 94       	clt
 398:	09 c0       	rjmp	.+18     	; 0x3ac <__floatsisf+0x12>

0000039a <__floatsisf>:
 39a:	97 fb       	bst	r25, 7
 39c:	3e f4       	brtc	.+14     	; 0x3ac <__floatsisf+0x12>
 39e:	90 95       	com	r25
 3a0:	80 95       	com	r24
 3a2:	70 95       	com	r23
 3a4:	61 95       	neg	r22
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255
 3a8:	8f 4f       	sbci	r24, 0xFF	; 255
 3aa:	9f 4f       	sbci	r25, 0xFF	; 255
 3ac:	99 23       	and	r25, r25
 3ae:	a9 f0       	breq	.+42     	; 0x3da <__floatsisf+0x40>
 3b0:	f9 2f       	mov	r31, r25
 3b2:	96 e9       	ldi	r25, 0x96	; 150
 3b4:	bb 27       	eor	r27, r27
 3b6:	93 95       	inc	r25
 3b8:	f6 95       	lsr	r31
 3ba:	87 95       	ror	r24
 3bc:	77 95       	ror	r23
 3be:	67 95       	ror	r22
 3c0:	b7 95       	ror	r27
 3c2:	f1 11       	cpse	r31, r1
 3c4:	f8 cf       	rjmp	.-16     	; 0x3b6 <__floatsisf+0x1c>
 3c6:	fa f4       	brpl	.+62     	; 0x406 <__floatsisf+0x6c>
 3c8:	bb 0f       	add	r27, r27
 3ca:	11 f4       	brne	.+4      	; 0x3d0 <__floatsisf+0x36>
 3cc:	60 ff       	sbrs	r22, 0
 3ce:	1b c0       	rjmp	.+54     	; 0x406 <__floatsisf+0x6c>
 3d0:	6f 5f       	subi	r22, 0xFF	; 255
 3d2:	7f 4f       	sbci	r23, 0xFF	; 255
 3d4:	8f 4f       	sbci	r24, 0xFF	; 255
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
 3d8:	16 c0       	rjmp	.+44     	; 0x406 <__floatsisf+0x6c>
 3da:	88 23       	and	r24, r24
 3dc:	11 f0       	breq	.+4      	; 0x3e2 <__floatsisf+0x48>
 3de:	96 e9       	ldi	r25, 0x96	; 150
 3e0:	11 c0       	rjmp	.+34     	; 0x404 <__floatsisf+0x6a>
 3e2:	77 23       	and	r23, r23
 3e4:	21 f0       	breq	.+8      	; 0x3ee <__floatsisf+0x54>
 3e6:	9e e8       	ldi	r25, 0x8E	; 142
 3e8:	87 2f       	mov	r24, r23
 3ea:	76 2f       	mov	r23, r22
 3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <__floatsisf+0x5e>
 3ee:	66 23       	and	r22, r22
 3f0:	71 f0       	breq	.+28     	; 0x40e <__floatsisf+0x74>
 3f2:	96 e8       	ldi	r25, 0x86	; 134
 3f4:	86 2f       	mov	r24, r22
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	2a f0       	brmi	.+10     	; 0x406 <__floatsisf+0x6c>
 3fc:	9a 95       	dec	r25
 3fe:	66 0f       	add	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	88 1f       	adc	r24, r24
 404:	da f7       	brpl	.-10     	; 0x3fc <__floatsisf+0x62>
 406:	88 0f       	add	r24, r24
 408:	96 95       	lsr	r25
 40a:	87 95       	ror	r24
 40c:	97 f9       	bld	r25, 7
 40e:	08 95       	ret

00000410 <__fp_cmp>:
 410:	99 0f       	add	r25, r25
 412:	00 08       	sbc	r0, r0
 414:	55 0f       	add	r21, r21
 416:	aa 0b       	sbc	r26, r26
 418:	e0 e8       	ldi	r30, 0x80	; 128
 41a:	fe ef       	ldi	r31, 0xFE	; 254
 41c:	16 16       	cp	r1, r22
 41e:	17 06       	cpc	r1, r23
 420:	e8 07       	cpc	r30, r24
 422:	f9 07       	cpc	r31, r25
 424:	c0 f0       	brcs	.+48     	; 0x456 <__fp_cmp+0x46>
 426:	12 16       	cp	r1, r18
 428:	13 06       	cpc	r1, r19
 42a:	e4 07       	cpc	r30, r20
 42c:	f5 07       	cpc	r31, r21
 42e:	98 f0       	brcs	.+38     	; 0x456 <__fp_cmp+0x46>
 430:	62 1b       	sub	r22, r18
 432:	73 0b       	sbc	r23, r19
 434:	84 0b       	sbc	r24, r20
 436:	95 0b       	sbc	r25, r21
 438:	39 f4       	brne	.+14     	; 0x448 <__fp_cmp+0x38>
 43a:	0a 26       	eor	r0, r26
 43c:	61 f0       	breq	.+24     	; 0x456 <__fp_cmp+0x46>
 43e:	23 2b       	or	r18, r19
 440:	24 2b       	or	r18, r20
 442:	25 2b       	or	r18, r21
 444:	21 f4       	brne	.+8      	; 0x44e <__fp_cmp+0x3e>
 446:	08 95       	ret
 448:	0a 26       	eor	r0, r26
 44a:	09 f4       	brne	.+2      	; 0x44e <__fp_cmp+0x3e>
 44c:	a1 40       	sbci	r26, 0x01	; 1
 44e:	a6 95       	lsr	r26
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	81 1d       	adc	r24, r1
 454:	81 1d       	adc	r24, r1
 456:	08 95       	ret

00000458 <__fp_inf>:
 458:	97 f9       	bld	r25, 7
 45a:	9f 67       	ori	r25, 0x7F	; 127
 45c:	80 e8       	ldi	r24, 0x80	; 128
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	08 95       	ret

00000464 <__fp_nan>:
 464:	9f ef       	ldi	r25, 0xFF	; 255
 466:	80 ec       	ldi	r24, 0xC0	; 192
 468:	08 95       	ret

0000046a <__fp_pscA>:
 46a:	00 24       	eor	r0, r0
 46c:	0a 94       	dec	r0
 46e:	16 16       	cp	r1, r22
 470:	17 06       	cpc	r1, r23
 472:	18 06       	cpc	r1, r24
 474:	09 06       	cpc	r0, r25
 476:	08 95       	ret

00000478 <__fp_pscB>:
 478:	00 24       	eor	r0, r0
 47a:	0a 94       	dec	r0
 47c:	12 16       	cp	r1, r18
 47e:	13 06       	cpc	r1, r19
 480:	14 06       	cpc	r1, r20
 482:	05 06       	cpc	r0, r21
 484:	08 95       	ret

00000486 <__fp_round>:
 486:	09 2e       	mov	r0, r25
 488:	03 94       	inc	r0
 48a:	00 0c       	add	r0, r0
 48c:	11 f4       	brne	.+4      	; 0x492 <__fp_round+0xc>
 48e:	88 23       	and	r24, r24
 490:	52 f0       	brmi	.+20     	; 0x4a6 <__fp_round+0x20>
 492:	bb 0f       	add	r27, r27
 494:	40 f4       	brcc	.+16     	; 0x4a6 <__fp_round+0x20>
 496:	bf 2b       	or	r27, r31
 498:	11 f4       	brne	.+4      	; 0x49e <__fp_round+0x18>
 49a:	60 ff       	sbrs	r22, 0
 49c:	04 c0       	rjmp	.+8      	; 0x4a6 <__fp_round+0x20>
 49e:	6f 5f       	subi	r22, 0xFF	; 255
 4a0:	7f 4f       	sbci	r23, 0xFF	; 255
 4a2:	8f 4f       	sbci	r24, 0xFF	; 255
 4a4:	9f 4f       	sbci	r25, 0xFF	; 255
 4a6:	08 95       	ret

000004a8 <__fp_split3>:
 4a8:	57 fd       	sbrc	r21, 7
 4aa:	90 58       	subi	r25, 0x80	; 128
 4ac:	44 0f       	add	r20, r20
 4ae:	55 1f       	adc	r21, r21
 4b0:	59 f0       	breq	.+22     	; 0x4c8 <__fp_splitA+0x10>
 4b2:	5f 3f       	cpi	r21, 0xFF	; 255
 4b4:	71 f0       	breq	.+28     	; 0x4d2 <__fp_splitA+0x1a>
 4b6:	47 95       	ror	r20

000004b8 <__fp_splitA>:
 4b8:	88 0f       	add	r24, r24
 4ba:	97 fb       	bst	r25, 7
 4bc:	99 1f       	adc	r25, r25
 4be:	61 f0       	breq	.+24     	; 0x4d8 <__fp_splitA+0x20>
 4c0:	9f 3f       	cpi	r25, 0xFF	; 255
 4c2:	79 f0       	breq	.+30     	; 0x4e2 <__fp_splitA+0x2a>
 4c4:	87 95       	ror	r24
 4c6:	08 95       	ret
 4c8:	12 16       	cp	r1, r18
 4ca:	13 06       	cpc	r1, r19
 4cc:	14 06       	cpc	r1, r20
 4ce:	55 1f       	adc	r21, r21
 4d0:	f2 cf       	rjmp	.-28     	; 0x4b6 <__fp_split3+0xe>
 4d2:	46 95       	lsr	r20
 4d4:	f1 df       	rcall	.-30     	; 0x4b8 <__fp_splitA>
 4d6:	08 c0       	rjmp	.+16     	; 0x4e8 <__fp_splitA+0x30>
 4d8:	16 16       	cp	r1, r22
 4da:	17 06       	cpc	r1, r23
 4dc:	18 06       	cpc	r1, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	f1 cf       	rjmp	.-30     	; 0x4c4 <__fp_splitA+0xc>
 4e2:	86 95       	lsr	r24
 4e4:	71 05       	cpc	r23, r1
 4e6:	61 05       	cpc	r22, r1
 4e8:	08 94       	sec
 4ea:	08 95       	ret

000004ec <__fp_zero>:
 4ec:	e8 94       	clt

000004ee <__fp_szero>:
 4ee:	bb 27       	eor	r27, r27
 4f0:	66 27       	eor	r22, r22
 4f2:	77 27       	eor	r23, r23
 4f4:	cb 01       	movw	r24, r22
 4f6:	97 f9       	bld	r25, 7
 4f8:	08 95       	ret

000004fa <__gesf2>:
 4fa:	8a df       	rcall	.-236    	; 0x410 <__fp_cmp>
 4fc:	08 f4       	brcc	.+2      	; 0x500 <__gesf2+0x6>
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
 500:	08 95       	ret

00000502 <__mulsf3>:
 502:	0b d0       	rcall	.+22     	; 0x51a <__mulsf3x>
 504:	c0 cf       	rjmp	.-128    	; 0x486 <__fp_round>
 506:	b1 df       	rcall	.-158    	; 0x46a <__fp_pscA>
 508:	28 f0       	brcs	.+10     	; 0x514 <__mulsf3+0x12>
 50a:	b6 df       	rcall	.-148    	; 0x478 <__fp_pscB>
 50c:	18 f0       	brcs	.+6      	; 0x514 <__mulsf3+0x12>
 50e:	95 23       	and	r25, r21
 510:	09 f0       	breq	.+2      	; 0x514 <__mulsf3+0x12>
 512:	a2 cf       	rjmp	.-188    	; 0x458 <__fp_inf>
 514:	a7 cf       	rjmp	.-178    	; 0x464 <__fp_nan>
 516:	11 24       	eor	r1, r1
 518:	ea cf       	rjmp	.-44     	; 0x4ee <__fp_szero>

0000051a <__mulsf3x>:
 51a:	c6 df       	rcall	.-116    	; 0x4a8 <__fp_split3>
 51c:	a0 f3       	brcs	.-24     	; 0x506 <__mulsf3+0x4>

0000051e <__mulsf3_pse>:
 51e:	95 9f       	mul	r25, r21
 520:	d1 f3       	breq	.-12     	; 0x516 <__mulsf3+0x14>
 522:	95 0f       	add	r25, r21
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	55 1f       	adc	r21, r21
 528:	62 9f       	mul	r22, r18
 52a:	f0 01       	movw	r30, r0
 52c:	72 9f       	mul	r23, r18
 52e:	bb 27       	eor	r27, r27
 530:	f0 0d       	add	r31, r0
 532:	b1 1d       	adc	r27, r1
 534:	63 9f       	mul	r22, r19
 536:	aa 27       	eor	r26, r26
 538:	f0 0d       	add	r31, r0
 53a:	b1 1d       	adc	r27, r1
 53c:	aa 1f       	adc	r26, r26
 53e:	64 9f       	mul	r22, r20
 540:	66 27       	eor	r22, r22
 542:	b0 0d       	add	r27, r0
 544:	a1 1d       	adc	r26, r1
 546:	66 1f       	adc	r22, r22
 548:	82 9f       	mul	r24, r18
 54a:	22 27       	eor	r18, r18
 54c:	b0 0d       	add	r27, r0
 54e:	a1 1d       	adc	r26, r1
 550:	62 1f       	adc	r22, r18
 552:	73 9f       	mul	r23, r19
 554:	b0 0d       	add	r27, r0
 556:	a1 1d       	adc	r26, r1
 558:	62 1f       	adc	r22, r18
 55a:	83 9f       	mul	r24, r19
 55c:	a0 0d       	add	r26, r0
 55e:	61 1d       	adc	r22, r1
 560:	22 1f       	adc	r18, r18
 562:	74 9f       	mul	r23, r20
 564:	33 27       	eor	r19, r19
 566:	a0 0d       	add	r26, r0
 568:	61 1d       	adc	r22, r1
 56a:	23 1f       	adc	r18, r19
 56c:	84 9f       	mul	r24, r20
 56e:	60 0d       	add	r22, r0
 570:	21 1d       	adc	r18, r1
 572:	82 2f       	mov	r24, r18
 574:	76 2f       	mov	r23, r22
 576:	6a 2f       	mov	r22, r26
 578:	11 24       	eor	r1, r1
 57a:	9f 57       	subi	r25, 0x7F	; 127
 57c:	50 40       	sbci	r21, 0x00	; 0
 57e:	8a f0       	brmi	.+34     	; 0x5a2 <__mulsf3_pse+0x84>
 580:	e1 f0       	breq	.+56     	; 0x5ba <__mulsf3_pse+0x9c>
 582:	88 23       	and	r24, r24
 584:	4a f0       	brmi	.+18     	; 0x598 <__mulsf3_pse+0x7a>
 586:	ee 0f       	add	r30, r30
 588:	ff 1f       	adc	r31, r31
 58a:	bb 1f       	adc	r27, r27
 58c:	66 1f       	adc	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	88 1f       	adc	r24, r24
 592:	91 50       	subi	r25, 0x01	; 1
 594:	50 40       	sbci	r21, 0x00	; 0
 596:	a9 f7       	brne	.-22     	; 0x582 <__mulsf3_pse+0x64>
 598:	9e 3f       	cpi	r25, 0xFE	; 254
 59a:	51 05       	cpc	r21, r1
 59c:	70 f0       	brcs	.+28     	; 0x5ba <__mulsf3_pse+0x9c>
 59e:	5c cf       	rjmp	.-328    	; 0x458 <__fp_inf>
 5a0:	a6 cf       	rjmp	.-180    	; 0x4ee <__fp_szero>
 5a2:	5f 3f       	cpi	r21, 0xFF	; 255
 5a4:	ec f3       	brlt	.-6      	; 0x5a0 <__mulsf3_pse+0x82>
 5a6:	98 3e       	cpi	r25, 0xE8	; 232
 5a8:	dc f3       	brlt	.-10     	; 0x5a0 <__mulsf3_pse+0x82>
 5aa:	86 95       	lsr	r24
 5ac:	77 95       	ror	r23
 5ae:	67 95       	ror	r22
 5b0:	b7 95       	ror	r27
 5b2:	f7 95       	ror	r31
 5b4:	e7 95       	ror	r30
 5b6:	9f 5f       	subi	r25, 0xFF	; 255
 5b8:	c1 f7       	brne	.-16     	; 0x5aa <__mulsf3_pse+0x8c>
 5ba:	fe 2b       	or	r31, r30
 5bc:	88 0f       	add	r24, r24
 5be:	91 1d       	adc	r25, r1
 5c0:	96 95       	lsr	r25
 5c2:	87 95       	ror	r24
 5c4:	97 f9       	bld	r25, 7
 5c6:	08 95       	ret

000005c8 <_exit>:
 5c8:	f8 94       	cli

000005ca <__stop_program>:
 5ca:	ff cf       	rjmp	.-2      	; 0x5ca <__stop_program>
